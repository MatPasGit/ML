# t-test for independent samples
from math import sqrt
from numpy.random import seed
from numpy.random import randn
from numpy import mean
from scipy.stats import sem
from scipy.stats import t
 
# function for calculating the t-test for two independent samples
def independent_ttest(mean1, mean2, std1, std2, alpha):
	# calculate standard errors
	n1 = 10
	n2 = 10
	se1 = std1/sqrt(n1)
	se2 = std2/sqrt(n2)
	# standard error on the difference between the samples
	sed = sqrt(se1**2.0 + se2**2.0)
	# calculate the t statistic
	t_stat = (mean1 - mean2) / sed
	# degrees of freedom
	df = 18
	# calculate the critical value
	cv = t.ppf(1.0 - alpha, df)
	# calculate the p-value
	p = (1.0 - t.cdf(abs(t_stat), df)) * 2.0
	# return everything
	return t_stat, df, cv, p


meanArray = [[0.73	, 0.73	, 0.73],
             [1.00	, 1.00	, 1.00],
             [0.65	, 0.65	, 0.65],
             [0.48	, 0.48	, 0.48],
             [0.98	, 0.98	, 0.98],
             [1.00	, 1.00	, 1.00],
             [0.50	, 0.50	, 0.50],
             [0.78	, 0.78	, 0.78],
             [0.51	, 0.51	, 0.51],
             [0.78	, 0.78	, 0.78],
             [0.84	, 0.84	, 0.84],
             [0.52	, 0.52	, 0.52],
             [0.35	, 0.35	, 0.35],
             [0.80	, 0.80	, 0.79],
             [0.89	, 0.89	, 0.88],
             [0.92	, 0.92	, 0.91],
             [0.84	, 0.84	, 0.84],
             [0.65	, 0.65	, 0.65],
             [1.00	, 1.00	, 1.00],
             [1.00	, 1.00	, 1.00],
             [1.00	, 1.00	, 1.00],
             [0.58	, 0.58	, 0.57]]

stdArray = [[0.0373,0.0373,0.0369],
[0.0001,0.0001,0.0001],
[0.0385,0.0385,0.0417],
[0.0201,0.0197,0.0204],
[0.0037,0.0037,0.0068],
[0.0001,0.0001,0.0001],
[0.0203,0.0203,0.0271],
[0.0171,0.0171,0.0169],
[0.0113,0.0134,0.0117],
[0.0022,0.0022,0.0024],
[0.0149,0.0167,0.0172],
[0.0001,0.0001,0.0001],
[0.0045,0.0045,0.0045],
[0.0097,0.0098,0.0097],
[0.0076,0.0076,0.0078],
[0.0042,0.0042,0.0037],
[0.0058,0.0058,0.0058],
[0.001,0.001,0.001],
[0.0006,0.0006,0.0006],
[0.0006,0.0006,0.0006],
[0.0004,0.0004,0.0004],
[0.0149,0.0149,0.0107]]




# calculate the t test
alpha = 0.05

elements = [[0,1], [0,2], [1,2]]

for x in range(22):
	print("Zestaw "+str(x+1)+": "+str(round(meanArray[x][0],3))+" & "+str(round(meanArray[x][1],3))+" & "+str(round(meanArray[x][2],3))+"\\\\")
	for a in elements:
		t_stat, df, cv, p = independent_ttest(meanArray[x][a[0]], meanArray[x][a[0]], stdArray[x][a[0]], stdArray[x][a[1]], alpha)
		#print(str(x+1)+" "+str(a[0]+1)+" "+str(a[1]+1))
		#print('t=%.3f, df=%d, cv=%.3f, p=%.3f' % (t_stat, df, cv, p))
		# interpret via critical value
		if abs(t_stat) < cv:
			print(str(x+1)+" "+str(a[0]+1)+" "+str(a[1]+1))
			print('Różne - t_stat')
		# interpret via p-value
		if p < alpha:
			print(str(x+1)+" "+str(a[0]+1)+" "+str(a[1]+1))
			print('Różne - p value')




#Bagging - Bayes
#[[0.0339, 0.0295, 0.0288],
# [0.0063, 0.0062, 0.0083],
# [0.0262, 0.0314, 0.0245],
# [0.0323, 0.0392, 0.0226],
# [0.0058, 0.0063, 0.0065],
# [0.0054, 0.0053, 0.0053],
# [0.0247, 0.0223, 0.0199],
# [0.0009, 0.0009, 0.0009],
# [0.021, 0.0227, 0.022],
# [0.0014, 0.0017, 0.0018],
# [0.0141, 0.0125, 0.0132],
# [0.0001, 0.0001, 0.0001],
# [0.0065, 0.0071, 0.0065],
# [0.0073, 0.0081, 0.0088],
# [0.0103,0.0101, 0.011],
# [0.0045, 0.0051, 0.0049],
# [0.0039, 0.0035, 0.0038],
# [0.001, 0.001, 0.001],
# [0.0373, 0.0103, 0.0093],
# [0.0264, 0.0255, 0.0943],
# [0.0109, 0.0113, 0.0107],
# [0.0054, 0.0065, 0.0054]]

#Bagging - Drzewo
#[[0.028, 0.028, 0.0369],
# [0.0001, 0.0001, 0.0001],
# [0.0321, 0.0321, 0.0291],
# [0.0139, 0.0136, 0.0155],
# [0.0048, 0.0048, 0.0073],
# [0.0001, 0.0001, 0.0001],
# [0.0357, 0.0357, 0.0213],
# [0.0085, 0.0085, 0.0104],
# [0.0134, 0.0109, 0.0124],
# [0.0016, 0.0016, 0.0022],
# [0.017, 0.017, 0.0142],
# [0.0001,0.0001, 0.0001],
# [0.003, 0.0034, 0.003],
# [0.0022, 0.0023, 0.0037],
# [0.0027, 0.0027, 0.0036],
# [0.0018, 0.0018, 0.0015],
# [0.0021, 0.0021, 0.0017],
# [0.001, 0.001, 0.001],
# [0.0009, 0.0009, 0.0009],
# [0.0009, 0.0009, 0.0008],
# [0.0009, 0.0009, 0.0009],
# [0.0105, 0.0105, 0.009]]
